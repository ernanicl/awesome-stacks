# DOMAIN=example.com docker stack deploy -c teable.yml teable

services:
  app:
    image: teableio/teable:${VERSION:-1.8.0-alpha-build.915-amd64}
    environment:
      - NEXT_ENV_IMAGES_ALL_REMOTE=true
      - PUBLIC_ORIGIN=${SCHEME:-https}://${DOMAIN:-teable.localhost}
      - PRISMA_DATABASE_URL=postgresql://teable:myp@ssw0rd@postgres:5432/teable
      - SECRET_KEY=${SECRET_KEY:-mys3cr3t} # openssl rand -hex 32
      - BACKEND_CACHE_REDIS_URI=redis://default@redis:6379/0
      - BACKEND_CACHE_PROVIDER=redis
    volumes:
      - ${VOLUME_PATH}data:/app/.assets
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.teable-${NUMBER:-1}.rule=Host(`${DOMAIN:-teable.localhost}`)
        - traefik.http.routers.teable-${NUMBER:-1}.entrypoints=${SCHEME:-https}
        - traefik.http.routers.teable-${NUMBER:-1}.service=teable-${NUMBER:-1}
        - traefik.http.routers.teable-${NUMBER:-1}.tls.certresolver=letsencrypt
        - traefik.http.services.teable-${NUMBER:-1}.loadbalancer.server.port=3000
    networks:
      - internal
      - traefik

  postgres:
    image: postgres:${POSTGRES_VERSION:-16-alpine}
    environment:
      - POSTGRES_DB=teable
      - POSTGRES_USER=teable
      - POSTGRES_PASSWORD=myp@ssw0rd
    volumes:
      - ${VOLUME_PATH}postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
    networks:
      - internal

  redis:
    image: redis:7-alpine
    volumes:
      - ${VOLUME_PATH}redis:/data
    networks:
      - internal

volumes:
  data:
  redis:
  postgres:

networks:
  internal:
    driver: overlay
    attachable: true
  traefik:
    external: true
    name: traefik-net
