# DOMAIN=example.com docker stack deploy -c calendso.yml calendso

x-calendso: &calendso
  environment:
    - VERSION=${VERSION:-v5.1.20}
    - NODE_ENV=production
    - POSTGRES_USER=calendso
    - POSTGRES_PASSWORD=myp@ssw0rd
    - POSTGRES_DB=calendso
    - DATABASE_URL=postgresql://calendso:myp@ssw0rd@postgres:5432/calendso
    - DATABASE_DIRECT_URL=postgresql://calendso:myp@ssw0rd@postgres:5432/calendso
    - NEXT_PUBLIC_WEBAPP_URL=${SCHEME:-https}://${DOMAIN:-calendso.localhost}
    - NEXT_PUBLIC_WEBSITE_URL=${SCHEME:-https}://${DOMAIN:-calendso.localhost}
    - NEXT_PUBLIC_API_V2_URL=${SCHEME:-https}://${DOMAIN:-calendso.localhost}/api/v2
    - NEXTAUTH_URL=${SCHEME:-https}://${DOMAIN:-calendso.localhost}
    - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-mys3cr3t} # openssl rand -base64 32
    - MS_GRAPH_CLIENT_ID=${MS_GRAPH_CLIENT_ID}
    - MS_GRAPH_CLIENT_SECRET=${MS_GRAPH_CLIENT_SECRET}
    - ZOOM_CLIENT_ID=${ZOOM_CLIENT_ID}
    - ZOOM_CLIENT_SECRET=${ZOOM_CLIENT_SECRET}
    - EMAIL_FROM=${SMTP_FROM:-noreply@example.com}
    - EMAIL_FROM_NAME=${EMAIL_FROM_NAME:-Calendso}
    - EMAIL_SERVER_HOST=${SMTP_HOST:-smtp.example.com}
    - EMAIL_SERVER_PORT=${SMTP_PORT:-587}
    - EMAIL_SERVER_USER=${SMTP_USER:-email_user}
    - EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD:-password}
    - CALENDSO_ENCRYPTION_KEY=${CALENDSO_ENCRYPTION_KEY:-mys3cr3t} # openssl rand -base64 24
    - CALCOM_TELEMETRY_DISABLED=${CALCOM_TELEMETRY_DISABLED:-1}
    - GOOGLE_API_CREDENTIALS=${GOOGLE_API_CREDENTIALS}
    - GOOGLE_LOGIN_ENABLED=${GOOGLE_LOGIN_ENABLED}
    - STACK_NAME={{ index .Service.Labels "com.docker.stack.namespace" }}
    - DOMAIN=${DOMAIN:-calendso.localhost}
    - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-Calendso}
    - NEXT_PUBLIC_COMPANY_NAME=${NEXT_PUBLIC_COMPANY_NAME:-Calendso}
    - NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS=${NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS:-admin@example.com}
    # - ALLOWED_HOSTNAMES=${ALLOWED_HOSTNAMES:-"localhost"}

services:
  docker:
    <<: *calendso
    image: docker:dind
    entrypoint: /bin/ash
    command:
      - -c
      - |
        docker image inspect calendso:$${DOMAIN} > /dev/null 2>&1 && exit 0
        apk add git
        git clone https://github.com/calcom/docker
        cd docker
        git checkout $${VERSION}
        git submodule update --init
        sed -i 's|--docker|--scope=@calcom/trpc --docker|' Dockerfile # Fix
        sed -i '/embed folder/a RUN yarn workspace @calcom/trpc run build' Dockerfile # Fix
        sed -i '/useSession/d' calcom/packages/features/ee/common/components/LicenseRequired.tsx
        sed -i '/const session/d' calcom/packages/features/ee/common/components/LicenseRequired.tsx
        sed -i 's/ && hasValidLicense === false//g' calcom/packages/features/ee/common/components/LicenseRequired.tsx
        sed -i 's/session.data ? session.data.hasValidLicense : null/true/g' calcom/packages/features/ee/common/components/LicenseRequired.tsx
        DOCKER_BUILDKIT=0 docker build \
        --build-arg NODE_ENV=$${NODE_ENV} \
        --build-arg EMAIL_FROM=$${EMAIL_FROM} \
        --build-arg DATABASE_URL=$${DATABASE_URL} \
        --build-arg NEXTAUTH_SECRET=$${NEXTAUTH_SECRET} \
        --build-arg NEXT_PUBLIC_APP_NAME=$${NEXT_PUBLIC_APP_NAME} \
        --build-arg GOOGLE_LOGIN_ENABLED=$${GOOGLE_LOGIN_ENABLED} \
        --build-arg GOOGLE_API_CREDENTIALS=$${GOOGLE_API_CREDENTIALS} \
        --build-arg NEXT_PUBLIC_WEBAPP_URL=$${NEXT_PUBLIC_WEBAPP_URL} \
        --build-arg NEXT_PUBLIC_API_V2_URL=$${NEXT_PUBLIC_API_V2_URL} \
        --build-arg NEXT_PUBLIC_WEBSITE_URL=$${NEXT_PUBLIC_WEBSITE_URL} \
        --build-arg CALENDSO_ENCRYPTION_KEY=$${CALENDSO_ENCRYPTION_KEY} \
        --build-arg NEXT_PUBLIC_COMPANY_NAME=$${NEXT_PUBLIC_COMPANY_NAME} \
        --build-arg CALCOM_TELEMETRY_DISABLED=$${CALCOM_TELEMETRY_DISABLED} \
        --build-arg NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS=$${NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS} \
        --network $${STACK_NAME}_internal \
        --no-cache -t calendso:$${DOMAIN} .
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal

  calendso:
    <<: *calendso
    image: calendso:${DOMAIN-calendso.localhost}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.calendso-${NUMBER:-1}.rule=Host(`${DOMAIN:-calendso.localhost}`)
        - traefik.http.routers.calendso-${NUMBER:-1}.entrypoints=${SCHEME:-https}
        - traefik.http.routers.calendso-${NUMBER:-1}.service=calendso-${NUMBER:-1}
        - traefik.http.routers.calendso-${NUMBER:-1}.tls.certresolver=letsencrypt
        - traefik.http.services.calendso-${NUMBER:-1}.loadbalancer.server.port=3000
    networks:
      - internal
      - traefik

  postgres:
    image: postgres:${POSTGRES_VERSION:-14-alpine}
    environment:
      - POSTGRES_DB=calendso
      - POSTGRES_USER=calendso
      - POSTGRES_PASSWORD=myp@ssw0rd
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "calendso", "-d", "calendso"]
    volumes:
      - ${VOLUME_PATH}postgres:/var/lib/postgresql/data
    networks:
      - internal
      - traefik

volumes:
  postgres:

networks:
  internal:
    driver: overlay
    attachable: true
  traefik:
    external: true
    name: traefik-net
